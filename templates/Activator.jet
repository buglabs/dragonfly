<%@ jet package="com.buglabs.dragonfly.generators.jet" imports="java.util.*" class="Activator" skeleton="Activator.skeleton"%>
/**
 * Generated by Dragonfly SDK.
 */
package <%=packageName%>;

<% if(usesPropertyFilters) { %>
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;

import com.buglabs.util.ServiceFilterGenerator;

import org.osgi.framework.Filter;
import org.osgi.framework.InvalidSyntaxException;

<% } %>

<% if (!createApplication && !usesPropertyFilters) { %>
import java.util.Map;

<% }
	
	Iterator siter = services.iterator();
	while(siter.hasNext()) {
		String sname = (String) siter.next();
%>
import <%=sname%>;
<%
	}
%>

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;
import org.osgi.util.tracker.ServiceTracker;

import com.buglabs.application.ServiceTrackerHelper;

/**
 * BundleActivator for <%=appName%>.  The OSGi entry point to the application.
 *
 */
public class Activator implements BundleActivator {
<% if(!usesPropertyFilters) { %>
    /**
	 * OSGi services the application depends on.
	 */
	private static final String [] services = {
<%	Iterator si = services.iterator();
	while(si.hasNext()) {
		String sq = (String) si.next();
		String serviceQualified = new String(sq);
		
		int i = serviceQualified.lastIndexOf(".");
		String service = "";
		if(i < 0) {
			service = serviceQualified;
		} else {
			service = serviceQualified.substring(i+1, serviceQualified.length());
		}
%>		
		<%=service%>.class.getName(),
<%
	}
%>
	};
<% } %>	
	private ServiceTracker serviceTracker;
	
	/*
	 * (non-Javadoc)
	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
	 */
	public void start(BundleContext context) throws Exception {
<% if (!usesPropertyFilters) {
    if (!createApplication) { %>
		serviceTracker = ServiceTrackerHelper.openServiceTracker(context, services, new ServiceTrackerHelper.ManagedInlineRunnable() {
			
			@Override
			public void run(Map<Object, Object> services) {
<%  siter = services.iterator();
	while(siter.hasNext()) {
		String sname = (String) siter.next();
		String serviceQualified = new String(sname);
		
		int i = serviceQualified.lastIndexOf(".");
		String service = "";
		if(i < 0) {
			service = serviceQualified;
		} else {
			service = serviceQualified.substring(i+1, serviceQualified.length());
		}
%>			
				<%=service%> <%= service.toLowerCase()%> = (<%=service %>) services.get(<%=service%>.class.getName());
<% } %>
				// Warning, this method will be called from within the same thread as the OSGi framework.  Long running operations should be avoided here.
				// Implement application here.
				
			}
			
			@Override
			public void shutdown() {
				// TODO Perform cleanup operations as necessary.
				
			}
		});
<% } else { %>
		//Begin tracking services, and when all services are available, create thread and call ManagedRunnable.run().
		serviceTracker = ServiceTrackerHelper.openServiceTracker(context, services, new <%=appName%>Application());
<% } %>

<% } else { %>
		SortedMap serviceMap = new TreeMap();
<%
	Iterator si = services.iterator();
	while(si.hasNext()) {
		String name = (String) si.next();
		String serviceQualified = new String(name);
		
		int i = serviceQualified.lastIndexOf(".");
		String service = "";
		if(i < 0) {
			service = serviceQualified;
		} else {
			service = serviceQualified.substring(i+1, serviceQualified.length());
		}
		
		// build the service property arrays
		String serviceFilterArrayDef = "new String[][] {}";
		if (propertyMap.containsKey(name)) {
		   serviceFilterArrayDef = 
		      createServiceFilterArrayDefinition((Map) propertyMap.get(name));
	    }
	    %>
	    addToMap(serviceMap, <%=service%>.class.getName(), <%=serviceFilterArrayDef%>);
	    <%
    }        
%>

 <%if (!createApplication) { %>
		serviceTracker = ServiceTrackerHelper.openServiceTracker(context, getServiceNames(serviceMap), createFilter(context, serviceMap), new ServiceTrackerHelper.ManagedInlineRunnable() {
			
			@Override
			public void run(Map<Object, Object> services) {
<%  siter = services.iterator();
	while(siter.hasNext()) {
		String sname = (String) siter.next();
		String serviceQualified = new String(sname);
		
		int i = serviceQualified.lastIndexOf(".");
		String service = "";
		if(i < 0) {
			service = serviceQualified;
		} else {
			service = serviceQualified.substring(i+1, serviceQualified.length());
		}
%>			
				<%=service%> <%= service.toLowerCase()%> = (<%=service %>) services.get(<%=service%>.class.getName());
<% } %>
				// Warning, this method will be called from within the same thread as the OSGi framework.  Long running operations should be avoided here.
				// Implement application here.
				
			}
			
			@Override
			public void shutdown() {
				// TODO Perform cleanup operations as necessary.
				
			}
		});
<% } else { %>
		//Begin tracking services, and when all services are available, create thread and call ManagedRunnable.run().
		serviceTracker = ServiceTrackerHelper.openServiceTracker(context, getServiceNames(serviceMap), createFilter(context, serviceMap), new <%=appName%>Application());
<% } %>
	
<% } %>
	}

    /*
	 * (non-Javadoc)
	 * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
	 */
	public void stop(BundleContext context) throws Exception {
		//Will cause the ManagedRunnable.shutdown() to be called.
		serviceTracker.close();
	}
	
	<%

if(usesPropertyFilters) {
%>
 	private Filter createFilter(BundleContext context, SortedMap services) throws InvalidSyntaxException {
		return context.createFilter(ServiceFilterGenerator.generateServiceFilter(services));
	}
    
    private String[] getServiceNames(SortedMap services) throws InvalidSyntaxException {
		return (String []) services.keySet().toArray(new String[services.size()]);
	}

	private void addToMap(SortedMap inMap,
			String key, String[][] valMap) {
		
		Map m = new HashMap();
		
		for (String [] nvp: Arrays.asList(valMap)) {
			m.put(nvp[0], nvp[1]);
		}
		
		inMap.put(key, m);
	}

<% } %>

}