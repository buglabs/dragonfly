<%@ jet package="com.buglabs.dragonfly.generators.jet" imports="java.util.*" class="ServiceTrackerCustomizer" skeleton="ServiceTrackerCustomizer.skeleton"%>
/**
 *	Generated by DragonFly
 *
 */
package <%=packageName%>;

import org.osgi.framework.BundleContext;
import com.buglabs.application.AbstractServiceTracker;

<%
if(genApp) {
%>
import <%=appPackageName%>.*;
<%
} // end if(genApp)
%>

 /**
 *	Service tracker for the BugApp Bundle;
 *
 */
public class <%=appName%>ServiceTracker extends AbstractServiceTracker {
<%
if(genApp) {
%>
	private <%=appName%>Application application;
<%
}//end of if(genApp) 
%>	

	public <%=appName%>ServiceTracker(BundleContext context) {
		super(context);
	}
	
	/**
	 * Determines if the application can start.
	 */
	public boolean canStart() {
		return super.canStart();
	}
	
	/**
	 * If canStart returns true
     * this method is called to start the application.
     * Place your fun logic here. 
	 */
	public void doStart() {
<%
if(genApp) {
%>
		if(!getApplication().isAlive()) {
			if(getApplication().getRan()) {
				application = new <%=appName%>Application(this);
			}
			getApplication().start();
		}
<%
} else {
%>
		System.out.println("<%=appName%>ServiceTracker: start");
<%
}
%>

	}

	/**
	 * Called when a service that this application depends is unregistered.
	 */
	public void doStop() {
<%
if(genApp) {
%>
		getApplication().tearDown();
<%
} else {
%>
		System.out.println("<%=appName%>ServiceTracker: stop");
<%
}
%>
	}

	/**
	 * Allows the user to set the service dependencies by
     * adding them to services list returned by getServices().
     * i.e.nl getServices().add(MyService.class.getName());
	 */
	public void initServices() {
<%

if(genApp && !usesPropertyFilters) {
%>
		getServices().addAll(getApplication().getServices());
<%
} else {
    
	Iterator si = serviceNames.iterator();
	while(si.hasNext()) {
		String name = (String) si.next();
		
		// build the service property arrays
		String serviceFilterArrayDef = "new String[][] {}";
		if (propertyMap.containsKey(name)) {
		   serviceFilterArrayDef = 
		      createServiceFilterArrayDefinition((Map) propertyMap.get(name));
	    }
	    
	    if (usesPropertyFilters) { %>
	       addServiceFilters("<%=name%>",
	           <%=serviceFilterArrayDef%>);
        <% } else { %>
            getServices().add("<%=name%>");
        <% }
    }        
}
%>
	}
	
<%
if(genApp) {
%>
	/**
	 * Returns the application thread.
	 */
	public <%=appName%>Application getApplication() {
		if(application == null) {
			application = new <%=appName%>Application(this);
		}
		
		return application;
	}
<%
}	// end of if(genApp)
%>

}

