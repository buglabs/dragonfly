package com.buglabs.dragonfly.generators.jet;

import java.util.*;
import com.buglabs.dragonfly.model.BugProjectInfo;

public class Activator
 {
    
  protected static String nl;
  public static synchronized Activator create(String lineSeparator)
  {
    nl = lineSeparator;
    Activator result = new Activator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/**" + NL + " * Generated by Dragonfly SDK." + NL + " */" + NL + "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import java.util.Arrays;" + NL + "import java.util.HashMap;" + NL + "import java.util.Map;" + NL + "import java.util.SortedMap;" + NL + "import java.util.TreeMap;" + NL + "" + NL + "import com.buglabs.util.osgi.FilterUtil;" + NL + "" + NL + "import org.osgi.framework.Filter;" + NL + "import org.osgi.framework.InvalidSyntaxException;" + NL;
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + "import java.util.Map;" + NL;
  protected final String TEXT_6 = NL + "import ";
  protected final String TEXT_7 = ";";
  protected final String TEXT_8 = NL + NL + "import org.osgi.framework.BundleActivator;" + NL + "import org.osgi.framework.BundleContext;" + NL + "import org.osgi.util.tracker.ServiceTracker;" + NL + "" + NL + "import com.buglabs.util.osgi.ServiceTrackerUtil;" + NL;
  protected final String TEXT_9 = NL + "import org.osgi.service.log.LogService;\t\t" + NL + "import com.buglabs.util.osgi.LogServiceUtil;";
  protected final String TEXT_10 = NL + NL + "/**" + NL + " * BundleActivator for ";
  protected final String TEXT_11 = ".  The OSGi entry point to the application." + NL + " *" + NL + " */" + NL + "public class Activator implements BundleActivator {";
  protected final String TEXT_12 = NL + "\tprivate static LogService logger = null;";
  protected final String TEXT_13 = NL + "    /**" + NL + "\t * OSGi services the application depends on." + NL + "\t */" + NL + "\tprivate static final String [] services = {";
  protected final String TEXT_14 = "\t\t" + NL + "\t\t";
  protected final String TEXT_15 = ".class.getName(),";
  protected final String TEXT_16 = NL + "\t};";
  protected final String TEXT_17 = "\t" + NL + "\tprivate ServiceTracker serviceTracker;" + NL + "\t" + NL + "\t/*" + NL + "\t * (non-Javadoc)" + NL + "\t * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)" + NL + "\t */" + NL + "\tpublic void start(BundleContext context) throws Exception {";
  protected final String TEXT_18 = NL + "\t\tserviceTracker = ServiceTrackerUtil.openServiceTracker(context, new ServiceTrackerUtil.ManagedInlineRunnable() {" + NL + "\t\t\t" + NL + "\t\t\t@Override" + NL + "\t\t\tpublic void run(Map<String, Object> services) {";
  protected final String TEXT_19 = "\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_20 = " ";
  protected final String TEXT_21 = " = (";
  protected final String TEXT_22 = ") services.get(";
  protected final String TEXT_23 = ".class.getName());";
  protected final String TEXT_24 = NL + "\t\t\t\t// Warning, this method will be called from within the same thread as the OSGi framework.  Long running operations should be avoided here." + NL + "\t\t\t\t// Implement application here." + NL + "\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t@Override" + NL + "\t\t\tpublic void shutdown() {" + NL + "\t\t\t\t// TODO Perform cleanup operations as necessary." + NL + "\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t}, services);";
  protected final String TEXT_25 = NL + "\t\t//Begin tracking services, and when all services are available, create thread and call ManagedRunnable.run()." + NL + "\t\tserviceTracker = ServiceTrackerUtil.openServiceTracker(context, new ";
  protected final String TEXT_26 = "Application(), services);";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "\t\tSortedMap serviceMap = new TreeMap();";
  protected final String TEXT_29 = NL + "\t    addToMap(serviceMap, ";
  protected final String TEXT_30 = ".class.getName(), ";
  protected final String TEXT_31 = ");" + NL + "\t    ";
  protected final String TEXT_32 = NL;
  protected final String TEXT_33 = NL + "\t\tserviceTracker = ServiceTrackerUtil.openServiceTracker(context, getServiceNames(serviceMap), createFilter(context, serviceMap), new ServiceTrackerUtil.ManagedInlineRunnable() {" + NL + "\t\t\t" + NL + "\t\t\t@Override" + NL + "\t\t\tpublic void run(Map<String, Object> services) {";
  protected final String TEXT_34 = "\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_35 = " ";
  protected final String TEXT_36 = " = (";
  protected final String TEXT_37 = ") services.get(";
  protected final String TEXT_38 = ".class.getName());";
  protected final String TEXT_39 = NL + "\t\t\t\t// Warning, this method will be called from within the same thread as the OSGi framework.  Long running operations should be avoided here." + NL + "\t\t\t\t// Implement application here." + NL + "\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t@Override" + NL + "\t\t\tpublic void shutdown() {" + NL + "\t\t\t\t// TODO Perform cleanup operations as necessary." + NL + "\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_40 = NL + "\t\t//Begin tracking services, and when all services are available, create thread and call ManagedRunnable.run()." + NL + "\t\tserviceTracker = ServiceTrackerUtil.openServiceTracker(context, getServiceNames(serviceMap), createFilter(context, serviceMap), new ";
  protected final String TEXT_41 = "Application());";
  protected final String TEXT_42 = NL + "\t";
  protected final String TEXT_43 = NL + "\t\tlogger = LogServiceUtil.getLogService(context);";
  protected final String TEXT_44 = NL + "\t\tSystem.out.println(\"DEBUG (\" + this.getClass().getName() + \"): Bundle Start\");";
  protected final String TEXT_45 = NL + "\t}" + NL + "" + NL + "    /*" + NL + "\t * (non-Javadoc)" + NL + "\t * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)" + NL + "\t */" + NL + "\tpublic void stop(BundleContext context) throws Exception {" + NL + "\t";
  protected final String TEXT_46 = NL + "\t\tSystem.out.println(\"DEBUG (\" + this.getClass().getName() + \"): Bundle Stop\");" + NL + "\t";
  protected final String TEXT_47 = NL + "\t\t//Will cause the ManagedRunnable.shutdown() to be called." + NL + "\t\tserviceTracker.close();" + NL + "\t}" + NL + "\t" + NL + "\t";
  protected final String TEXT_48 = NL + " \tprivate Filter createFilter(BundleContext context, SortedMap services) throws InvalidSyntaxException {" + NL + "\t\treturn context.createFilter(ServiceFilterGenerator.generateServiceFilter(services));" + NL + "\t}" + NL + "    " + NL + "    private String[] getServiceNames(SortedMap services) throws InvalidSyntaxException {" + NL + "\t\treturn (String []) services.keySet().toArray(new String[services.size()]);" + NL + "\t}" + NL + "" + NL + "\tprivate void addToMap(SortedMap inMap," + NL + "\t\t\tString key, String[][] valMap) {" + NL + "\t\t" + NL + "\t\tMap m = new HashMap();" + NL + "\t\t" + NL + "\t\tfor (String [] nvp: Arrays.asList(valMap)) {" + NL + "\t\t\tm.put(nvp[0], nvp[1]);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tinMap.put(key, m);" + NL + "\t}";
  protected final String TEXT_49 = NL + "    /**" + NL + "\t * @return an instance of the LogService." + NL + "\t */" + NL + "\tpublic static LogService getLogger() {" + NL + "\t\treturn logger;" + NL + "\t}";
  protected final String TEXT_50 = NL + "}";

    /**
    * Helper function to turn Map of string properties to array String[][] def
    */
    private String createServiceFilterArrayDefinition(Map properties) {
          // we'll build our array definition
          String serviceFilterArrayDef = "new String[][] {";
          Iterator itr = properties.keySet().iterator();
          String delim = "";
          while (itr.hasNext()) {
              String propKey = (String) itr.next();
              serviceFilterArrayDef += delim + 
                  "{\"" + propKey + "\", \"" + properties.get(propKey) + "\"}";
              delim = ", ";
          }
          serviceFilterArrayDef += "}";
          
          return serviceFilterArrayDef;
    }
    
   public String generate(String appName, String packageName, String moduleTrackerPackageName, boolean usesPropertyFilters, List services, boolean createApplication, Map propertyMap, BugProjectInfo projInfo)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(TEXT_1);
    stringBuffer.append(packageName);
    stringBuffer.append(TEXT_2);
     if(usesPropertyFilters) { 
    stringBuffer.append(TEXT_3);
     } 
    stringBuffer.append(TEXT_4);
     if (!createApplication && !usesPropertyFilters) { 
    stringBuffer.append(TEXT_5);
     }
	
	Iterator siter = services.iterator();
	while(siter.hasNext()) {
		String sname = (String) siter.next();

    stringBuffer.append(TEXT_6);
    stringBuffer.append(sname);
    stringBuffer.append(TEXT_7);
    
	}

    stringBuffer.append(TEXT_8);
     if (projInfo.getGenerateLogMethod()) { 
    stringBuffer.append(TEXT_9);
     } 
    stringBuffer.append(TEXT_10);
    stringBuffer.append(appName);
    stringBuffer.append(TEXT_11);
     if (projInfo.getGenerateLogMethod()) { 
    stringBuffer.append(TEXT_12);
     } 
     if(!usesPropertyFilters) { 
    stringBuffer.append(TEXT_13);
    	Iterator si = services.iterator();
	while(si.hasNext()) {
		String sq = (String) si.next();
		String serviceQualified = new String(sq);
		
		int i = serviceQualified.lastIndexOf(".");
		String service = "";
		if(i < 0) {
			service = serviceQualified;
		} else {
			service = serviceQualified.substring(i+1, serviceQualified.length());
		}

    stringBuffer.append(TEXT_14);
    stringBuffer.append(service);
    stringBuffer.append(TEXT_15);
    
	}

    stringBuffer.append(TEXT_16);
     } 
    stringBuffer.append(TEXT_17);
     if (!usesPropertyFilters) {
    if (!createApplication) { 
    stringBuffer.append(TEXT_18);
      siter = services.iterator();
	while(siter.hasNext()) {
		String sname = (String) siter.next();
		String serviceQualified = new String(sname);
		
		int i = serviceQualified.lastIndexOf(".");
		String service = "";
		if(i < 0) {
			service = serviceQualified;
		} else {
			service = serviceQualified.substring(i+1, serviceQualified.length());
		}

    stringBuffer.append(TEXT_19);
    stringBuffer.append(service);
    stringBuffer.append(TEXT_20);
    stringBuffer.append( service.toLowerCase());
    stringBuffer.append(TEXT_21);
    stringBuffer.append(service );
    stringBuffer.append(TEXT_22);
    stringBuffer.append(service);
    stringBuffer.append(TEXT_23);
     } 
    stringBuffer.append(TEXT_24);
     } else { 
    stringBuffer.append(TEXT_25);
    stringBuffer.append(appName);
    stringBuffer.append(TEXT_26);
     } 
    stringBuffer.append(TEXT_27);
     } else { 
    stringBuffer.append(TEXT_28);
    
	Iterator si = services.iterator();
	while(si.hasNext()) {
		String name = (String) si.next();
		String serviceQualified = new String(name);
		
		int i = serviceQualified.lastIndexOf(".");
		String service = "";
		if(i < 0) {
			service = serviceQualified;
		} else {
			service = serviceQualified.substring(i+1, serviceQualified.length());
		}
		
		// build the service property arrays
		String serviceFilterArrayDef = "new String[][] {}";
		if (propertyMap.containsKey(name)) {
		   serviceFilterArrayDef = 
		      createServiceFilterArrayDefinition((Map) propertyMap.get(name));
	    }
	    
    stringBuffer.append(TEXT_29);
    stringBuffer.append(service);
    stringBuffer.append(TEXT_30);
    stringBuffer.append(serviceFilterArrayDef);
    stringBuffer.append(TEXT_31);
    
    }        

    stringBuffer.append(TEXT_32);
    if (!createApplication) { 
    stringBuffer.append(TEXT_33);
      siter = services.iterator();
	while(siter.hasNext()) {
		String sname = (String) siter.next();
		String serviceQualified = new String(sname);
		
		int i = serviceQualified.lastIndexOf(".");
		String service = "";
		if(i < 0) {
			service = serviceQualified;
		} else {
			service = serviceQualified.substring(i+1, serviceQualified.length());
		}

    stringBuffer.append(TEXT_34);
    stringBuffer.append(service);
    stringBuffer.append(TEXT_35);
    stringBuffer.append( service.toLowerCase());
    stringBuffer.append(TEXT_36);
    stringBuffer.append(service );
    stringBuffer.append(TEXT_37);
    stringBuffer.append(service);
    stringBuffer.append(TEXT_38);
     } 
    stringBuffer.append(TEXT_39);
     } else { 
    stringBuffer.append(TEXT_40);
    stringBuffer.append(appName);
    stringBuffer.append(TEXT_41);
     } 
    stringBuffer.append(TEXT_42);
     } 
     if (projInfo.getGenerateLogMethod()) { 
    stringBuffer.append(TEXT_43);
     } 
     if (projInfo.getGenerateDebugStatements()) { 
    stringBuffer.append(TEXT_44);
     } 
    stringBuffer.append(TEXT_45);
     if (projInfo.getGenerateDebugStatements()) { 
    stringBuffer.append(TEXT_46);
     } 
    stringBuffer.append(TEXT_47);
    

if(usesPropertyFilters) {

    stringBuffer.append(TEXT_48);
     } 
     if (projInfo.getGenerateLogMethod()) { 
    stringBuffer.append(TEXT_49);
     } 
    stringBuffer.append(TEXT_50);
    return stringBuffer.toString();
  }
}